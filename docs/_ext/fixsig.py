# SPDX-FileCopyrightText: 2020-2024 CERN
# SPDX-FileCopyrightText: 2023-2024 GSI Helmholtzzentrum fÃ¼r Schwerionenforschung
# SPDX-FileNotice: All rights not expressly granted are reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later OR EUPL-1.2+

"""A number of small fixes to autodoc-generated signatures."""

from __future__ import annotations

import enum
import typing as t

if t.TYPE_CHECKING:
    from sphinx.application import Config, Sphinx
    from sphinx.util.typing import ExtensionMetadata


def hide_enum_init_args(
    app: Sphinx,
    what: str,
    name: str,
    obj: object,
    options: dict[str, bool],
    signature: str,
    return_annotation: str,
) -> tuple[str, str] | None:
    """Hide all enum args except the first one."""
    if what == "class" and isinstance(obj, type) and issubclass(obj, enum.Enum):
        # Extract all args and only keep the first.
        arg = signature.strip("()").split(", ", 1)[0]
        signature = f"({arg!s}: str)"
        return signature, return_annotation
    return None


def hide_exception_init_args(
    app: Sphinx,
    what: str,
    name: str,
    obj: object,
    options: dict[str, bool],
    signature: str,
    return_annotation: str,
) -> tuple[str, str] | None:
    """Hide all exception args."""
    if what == "exception" and isinstance(obj, type) and issubclass(obj, Exception):
        return "", ""
    return None


def hide_mcs_init_args(
    app: Sphinx,
    what: str,
    name: str,
    obj: object,
    options: dict[str, bool],
    signature: str,
    return_annotation: str,
) -> tuple[str, str] | None:
    """Hide all metaclass args."""
    if what == "class" and isinstance(obj, type) and issubclass(obj, type):
        return "", ""
    return None


def fix_generic_sigs(
    app: Sphinx,
    what: str,
    name: str,
    obj: object,
    options: dict[str, bool],
    signature: str,
    return_annotation: str,
) -> tuple[str, str] | None:
    """Fix generic function signatures generated by autodoc."""
    if signature and name.startswith("cernml.coi.Config") and "~.T" in signature:
        return signature.replace("~.T", "~T"), return_annotation
    return None


def install_handlers(app: Sphinx, config: Config) -> None:
    """Read config and install fixers."""
    if config.fixsig_fix_dot_t:
        app.connect("autodoc-process-signature", fix_generic_sigs)
    if config.fixsig_hide_enum_init_args:
        app.connect("autodoc-process-signature", hide_enum_init_args)
    if config.fixsig_hide_exception_init_args:
        app.connect("autodoc-process-signature", hide_exception_init_args)
    if config.fixsig_hide_mcs_init_args:
        app.connect("autodoc-process-signature", hide_mcs_init_args)


def setup(app: Sphinx) -> ExtensionMetadata:
    """Set up hooks into Sphinx."""
    app.add_config_value("fixsig_fix_dot_t", True, "env", bool)
    app.add_config_value("fixsig_hide_enum_init_args", False, "env", bool)
    app.add_config_value("fixsig_hide_exception_init_args", False, "env", bool)
    app.add_config_value("fixsig_hide_mcs_init_args", False, "env", bool)
    app.connect("config-inited", install_handlers)
    return {
        "version": "1.0",
        "parallel_read_safe": True,
        "parallel_write_safe": True,
    }
