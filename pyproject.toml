# SPDX-FileCopyrightText: 2020-2023 CERN
# SPDX-FileCopyrightText: 2023 GSI Helmholtzzentrum fÃ¼r Schwerionenforschung
# SPDX-FileNotice: All rights not expressly granted are reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later OR EUPL-1.2+

[build-system]
requires = [
    'pip >= 24',
    'setuptools >= 62',
    'setuptools-scm[toml] ~= 8.0',
    'wheel',
]
build-backend = 'setuptools.build_meta'

[project]
dynamic = ['version']
name = 'cernml-coi-utils'
authors = [
    {name = 'Nico Madysa', email = 'nico.madysa@cern.ch'},
]
description = 'Utilities for the Common Optimization Interfaces'
readme = 'README.md'
license = {file='COPYING'}
requires-python = '>=3.9'
dependencies = [
    'cernml-coi >=0.9',
    'typing_extensions >= 4.0; python_version<"3.11"'
]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Scientific/Engineering :: Physics',
    'Typing :: Typed',
]

[project.urls]
gitlab = 'https://gitlab.cern.ch/geoff/cernml-coi-utils/'
docs = 'https://acc-py.web.cern.ch/gitlab/geoff/cernml-coi-utils/'
wiki = 'https://wikis.cern.ch/pages/viewpage.action?pageId=194741479'

[project.optional-dependencies]
matplotlib = [
    'matplotlib ~= 3.8',
]
pyjapc = [
    'pyjapc ~= 2.7',
]
pjlsa = [
    'pjlsa ~= 0.2.18',
]
all = [
    'cernml-coi-utils[matplotlib,pjlsa,pyjapc]',
]
doc-only = [
    'sphinx',
]
doc = [
    'cernml-coi-utils[all,doc-only]',
]
test = [
    'cernml-coi-utils[all]',
    'pytest',
    'pytest-cov',
]

[tool.setuptools]
zip-safe = true
package-data = {'*' = ['py.typed']}

[tool.setuptools_scm]

[tool.black]
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = 'black'

[tool.pytest.ini_options]
addopts = '--doctest-modules --doctest-glob=*.rst'
testpaths = ['tests', 'src', 'docs/guide']
doctest_optionflags = ['ELLIPSIS', 'IGNORE_EXCEPTION_DETAIL']

[tool.pylint.format]
ignore-long-lines = '<?https?://\S+>?$'

[tool.pylint.reports]
reports = false
score = false

[tool.pylint.'messages control']
disable = [
    'not-an-iterable',
    'similarities',
    'too-many-arguments',
    'unpacking-non-sequence',
    'unsubscriptable-object',
]

[tool.pylint.MAIN]
# Ignore Java packages imported via JPype as if they really existed.
ignored-modules = ['java', 'cern']
ignore-patterns = ['.*\.pyi$', 'test_.*\.py$']
ignore-paths = ['docs/']

[tool.coverage.run]
source = ['src']
branch = true

[tool.coverage.report]
exclude_also = [
    '^\s*@.*\.overload$',
    '^\s*def __del__',
    '^\s*except ImportError:$',
    '^\s*from .* import',
    '^\s*if .*\.TYPE_CHECKING:$',
    '^\s*if sys\.version_info ..? \(\d, \d+\):$',
    '^\s*import ',
    '^\s*raise NotImplementedError',
]

[tool.mypy]
disallow_untyped_defs = true
explicit_package_bases = true
mypy_path = '$MYPY_CONFIG_FILE_DIR/src'

[[tool.mypy.overrides]]
module = ['scipy.*']
ignore_missing_imports = true
