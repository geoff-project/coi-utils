# SPDX-FileCopyrightText: 2020-2024 CERN
# SPDX-FileCopyrightText: 2023-2024 GSI Helmholtzzentrum für Schwerionenforschung
# SPDX-FileNotice: All rights not expressly granted are reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later OR EUPL-1.2+

[build-system]
requires = [
    'pip >= 24',
    'setuptools >= 62',
    'setuptools-scm[toml] ~= 8.0',
    'wheel',
]
build-backend = 'setuptools.build_meta'

[project]
dynamic = ['version']
name = 'cernml-coi-utils'
authors = [
    {name = 'Nico Madysa', email = 'nico.madysa@cern.ch'},
]
description = 'Utilities for the Common Optimization Interfaces'
readme = 'README.md'
license = {file='COPYING'}
requires-python = '>=3.9'
dependencies = [
    'cernml-coi >=0.9',
    'typing_extensions >= 4.0; python_version<"3.12"'
]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Scientific/Engineering :: Physics',
    'Typing :: Typed',
]

[project.urls]
gitlab = 'https://gitlab.cern.ch/geoff/cernml-coi-utils/'
docs = 'https://acc-py.web.cern.ch/gitlab/geoff/cernml-coi-utils/'
wiki = 'https://wikis.cern.ch/pages/viewpage.action?pageId=194741479'

[project.optional-dependencies]
matplotlib = [
    'matplotlib ~= 3.8',
]
pyjapc = [
    'pyjapc ~= 2.7',
]
pjlsa = [
    'pjlsa ~= 0.2.18',
]
all = [
    'cernml-coi-utils[matplotlib,pjlsa,pyjapc]',
]
doc-only = [
    'types-docutils',
    'python-docs-theme',
    'sphinx',
]
doc = [
    'cernml-coi-utils[all,doc-only]',
]
test = [
    'cernml-coi-utils[all]',
    'pytest',
    'pytest-cov',
]

[tool.setuptools]
zip-safe = true
package-data = {'*' = ['py.typed']}

[tool.setuptools_scm]

[tool.black]
target-version = ['py39', 'py310', 'py311']

[tool.isort]
profile = 'black'
known_first_party = ['cernml']

[tool.ruff]
fix = true
src = ['src', 'test']
target-version = 'py39'

[tool.ruff.lint]
# Missing warnings:
# F822 not raised in __init__.py: https://github.com/astral-sh/ruff/issues/10095
# D* not raised in _*.py: https://github.com/astral-sh/ruff/issues/9561
extend-select = [
    'A', 'ARG', 'ASYNC', 'B', 'C4', 'C90', 'COM818', 'D', 'DTZ', 'EXE', 'FLY',
    'I', 'ICN', 'ISC', 'NPY', 'PD', 'PERF', 'PGH', 'PIE', 'PLR5501', 'PT',
    'PTH', 'PYI', 'RET', 'RSE', 'RUF', 'SIM', 'SLOT', 'T10', 'TD003', 'TRY',
    'UP',
]
ignore = [
    'D105',   # Missing docstring in magic method
    'D107',   # Missing docstring in __init__
    'D412',   # No blank lines allowed between a section header and its content
    'D417',   # Missing argument description in the docstring
    'ISC001', # Implicit string concatenation, conflicts with autoformat
    'TRY003', # Avoid specifying long messages outside the exception class
    'UP037',  # Remove quotes from type annotation
]
allowed-confusables = [
    ' ',  # U+00A0 NO-BREAK SPACE
    '×',  # U+00D7 MULTIPLICATION SIGN
    '–',  # U+2013 EN DASH
    '−',  # U+2212 MINUS SIGN
]
flake8-pytest-style.fixture-parentheses = false
isort.split-on-trailing-comma = true
isort.known-first-party = ['cernml']
pycodestyle.max-doc-length = 72
pydocstyle.convention = 'google'
pydocstyle.ignore-decorators = ['overload', 'overrides']

[tool.ruff.lint.per-file-ignores]
'conftest.py' = ['A001', 'ARG', 'D', 'INP']
'**/{tests,docs}/*' = ['A001', 'ARG', 'D', 'INP']

[tool.pylint]
format.ignore-long-lines = '<?https?://\S+>?$'
# Ignore Java packages imported via JPype as if they really existed.
main.ignored-modules = ['java', 'cern']
# The `.*` part ensures that the regex matches both absolute and relative
# paths. Necessary for PyLSP, which always passes absolute paths to PyLint.
main.ignore-paths = ['.*docs/']
main.ignore-patterns = ['conftest\.py$', '.*\.pyi$', 'test_.*\.py$']
main.extension-pkg-whitelist = 'PyQt5'
'messages control'.disable = ['all']
'messages control'.enable = [
    'F',
    'bad-inline-option',
    'cell-var-from-loop',
    'missing-class-docstring',
    'missing-function-docstring',
    'missing-module-docstring',
    'singledispatch-method',
    'singledispatchmethod-function',
    'super-init-not-called',
    'typevar-double-variance',
    'typevar-name-incorrect-variance',
    'typevar-name-mismatch',
    'undefined-all-variable',
    'unrecognized-inline-option',
    'unrecognized-option',
]

[tool.pytest.ini_options]
addopts = '--doctest-modules --doctest-glob=*.rst'
testpaths = ['tests', 'src', 'docs/guide']
doctest_optionflags = ['ELLIPSIS', 'IGNORE_EXCEPTION_DETAIL']

[tool.coverage.run]
source = ['src']
branch = true

[tool.coverage.report]
exclude_also = [
    '^\s*@.*\.overload$',
    '^\s*def __del__',
    '^\s*except ImportError( as exc)?:$',
    '^\s*from .* import',
    '^\s*if .*\.TYPE_CHECKING:$',
    '^\s*if sys\.version_info ..? \(\d, \d+\):$',
    '^\s*import ',
    '^\s*raise NotImplementedError',
]

[tool.mypy]
disallow_untyped_defs = true
explicit_package_bases = true
mypy_path = '$MYPY_CONFIG_FILE_DIR/src'

[[tool.mypy.overrides]]
module = ['scipy.*']
ignore_missing_imports = true
